import{b as c,a as f}from"./Error-9392329b.js";import{b as S}from"./Portal-fe1a007c.js";import{U as h}from"./request-16c6134d.js";import{b as d}from"./ensureType-8c80e8c7.js";import{c as l}from"./jsonUtils-e2434b33.js";import{f as w,i as R,o as $}from"./normalizeUtils-08ce1e14.js";import{e as m,y as p,a as v,l as J}from"./cast-4d1aa82d.js";import"./typedArrayUtil-c81d173a.js";import"./string-bf9c68ed.js";import"./preload-helper-41c905a7.js";import"./Loadable-e19fba09.js";import"./Promise-24c50191.js";import"./promiseUtils-3ce2a460.js";import"./Extent-52b65909.js";import"./locale-30120714.js";import"./PortalGroup-45834c06.js";import"./PortalUser-8de15b25.js";import"./nextTick-3ee5a785.js";import"./Polyline-7f90e3cc.js";import"./normalizeUtilsCommon-42c6cdb7.js";import"./geometry-8c15a791.js";import"./typeUtils-f38bdb16.js";let a=class extends J{constructor(r){super(r),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const r=this.geometries.map(i=>i.toJSON()),e=this.geometries[0],t={};return t.outSR=this.outSpatialReference.wkid||JSON.stringify(this.outSpatialReference.toJSON()),t.inSR=e.spatialReference.wkid||JSON.stringify(e.spatialReference.toJSON()),t.geometries=JSON.stringify({geometryType:l(e),geometries:r}),this.transformation&&(t.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(t.transformForward=this.transformForward),t}};m([p()],a.prototype,"geometries",void 0),m([p({json:{read:{source:"outSR"}}})],a.prototype,"outSpatialReference",void 0),m([p()],a.prototype,"transformation",void 0),m([p()],a.prototype,"transformForward",void 0),a=m([v("esri.rest.support.ProjectParameters")],a);const u=a,N=d(u);async function O(o,r,e){r=N(r);const t=w(o),i={...t.query,f:"json",...r.toJSON()},n=r.outSpatialReference,s=l(r.geometries[0]),g=R(i,e);return h(t.path+"/project",g).then(({data:{geometries:y}})=>$(y,s,n))}async function j(o=null,r){var i,n;if(c.geometryServiceUrl)return c.geometryServiceUrl;if(!o)throw new f("internal:geometry-service-url-not-configured");let e;e="portal"in o?o.portal||S.getDefault():o,await e.load({signal:r});const t=(n=(i=e.helperServices)==null?void 0:i.geometry)==null?void 0:n.url;if(!t)throw new f("internal:geometry-service-url-not-configured");return t}async function X(o,r,e=null,t){const i=await j(e,t),n=new u;n.geometries=[o],n.outSpatialReference=r;const s=await O(i,n,{signal:t});if(s&&Array.isArray(s)&&s.length===1)return s[0];throw new f("internal:geometry-service-projection-failed")}export{j as getGeometryServiceURL,X as projectGeometry};
