import{a as b}from"./Error-9392329b.js";import{e as d}from"./typedArrayUtil-c81d173a.js";import"./string-bf9c68ed.js";let c;function x(n,s){let e=s.responseType;e?e!=="array-buffer"&&e!=="blob"&&e!=="json"&&e!=="native"&&e!=="native-request-init"&&e!=="text"&&(e="text"):e="json",s.responseType=e;const p=d(s.signal);return delete s.signal,globalThis.invokeStaticMessage("request",{url:n,options:s},{signal:p}).then(async t=>{let i,a,l,u,r;if(t.data)if(t.data instanceof ArrayBuffer){if(!(e!=="json"&&e!=="text"&&e!=="blob"||(i=new Blob([t.data]),e!=="json"&&e!=="text"||(c||(c=new FileReaderSync),u=c.readAsText(i),e!=="json")))){try{a=JSON.parse(u||null)}catch(o){const f={...o,url:n,requestOptions:s};throw new b("request:server",o.message,f)}if(a.error){const o={...a.error,url:n,requestOptions:s};throw new b("request:server",a.error.message,o)}}}else e==="native"&&(t.data.signal=p,l=await fetch(t.data.url,t.data),t.httpStatus=l.status);switch(e){case"blob":r=i;break;case"json":r=a;break;case"native":r=l;break;case"text":r=u;break;default:r=t.data}return{data:r,httpStatus:t.httpStatus,requestOptions:s,ssl:t.ssl,url:n}})}export{x as execute};
