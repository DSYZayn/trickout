import{D as v,w as f,e as s,y as p,a as w}from"./cast-4d1aa82d.js";import{U as g}from"./request-16c6134d.js";import{T as $}from"./TimeExtent-0fb637c6.js";import{a as b}from"./Error-9392329b.js";import{a as I}from"./HandleOwner-1ffa4597.js";import{l as O}from"./loadAll-8b24919b.js";import{r as T}from"./typedArrayUtil-c81d173a.js";import{O as E}from"./MultiOriginJSONSupport-55da1d06.js";import{w as R,j as M}from"./promiseUtils-3ce2a460.js";import{T as L}from"./ensureType-8c80e8c7.js";import{a as P,o as j,r as F}from"./Extent-52b65909.js";import{i as N}from"./scaleUtils-8911ddd5.js";import{b as U}from"./Layer-5bf3596f.js";import{i as J}from"./APIKeyMixin-35aced10.js";import{E as _,y as q,Z as k}from"./SublayersOwner-92439a93.js";import{p as A}from"./ArcGISService-78831401.js";import{n as V}from"./BlendLayer-1f4ade52.js";import{o as z}from"./CustomParametersMixin-6e258788.js";import{c as D,f as B}from"./OperationalLayer-70e0771f.js";import{_ as C}from"./PortalLayer-d4941bb0.js";import{p as G}from"./RefreshableLayer-2dcbbf25.js";import{t as H}from"./ScaleRangeLayer-a6967062.js";import{a as K}from"./TemporalLayer-76f9669f.js";import{c as W}from"./ExportImageParameters-7b7ef2c0.js";import{e as Z}from"./imageBitmapUtils-86f741ce.js";import{n as x}from"./sublayerUtils-5d4d0ee3.js";import{e as Q}from"./versionUtils-0602c916.js";import{a as S}from"./TimeReference-d5a14980.js";import"./string-bf9c68ed.js";import"./nextTick-3ee5a785.js";import"./preload-helper-41c905a7.js";import"./reactiveUtils-989a8d7f.js";import"./asyncUtils-d59cad3c.js";import"./Collection-54857936.js";import"./Evented-d69b5d66.js";import"./SimpleObservable-7e8b69a3.js";import"./Loadable-e19fba09.js";import"./Promise-24c50191.js";import"./geometry-8c15a791.js";import"./Polyline-7f90e3cc.js";import"./typeUtils-f38bdb16.js";import"./Identifiable-a49d7533.js";import"./Version-e29b3f14.js";import"./CollectionFlattener-8de7cbfd.js";import"./PopupTemplate-7c042eda.js";import"./Clonable-ad03ca71.js";import"./fieldUtils-c41301b0.js";import"./enumeration-de0a766e.js";import"./number-b98554af.js";import"./locale-30120714.js";import"./UniqueValueRenderer-adb2594e.js";import"./symbols-426355d5.js";import"./CIMSymbol-33f517af.js";import"./Color-46910694.js";import"./colorUtils-639f4d25.js";import"./mathUtils-505ef34b.js";import"./screenUtils-7afeb41c.js";import"./opacityUtils-a1e441cd.js";import"./aaBoundingBox-55a55434.js";import"./persistableUrlUtils-abff3ce1.js";import"./collectionUtils-cc5781ab.js";import"./Portal-fe1a007c.js";import"./PortalGroup-45834c06.js";import"./PortalUser-8de15b25.js";import"./LegendOptions-6e5321d3.js";import"./diffUtils-ba6273ab.js";import"./colorRamps-6cc98f16.js";import"./sizeVariableUtils-d4870b0d.js";import"./Graphic-b6696507.js";import"./jsonUtils-e2434b33.js";import"./compilerUtils-db2fe354.js";import"./lengthUtils-320ae102.js";import"./jsonUtils-dfa282b7.js";import"./layerUtils-394e7a48.js";import"./styleUtils-6ef1c49e.js";import"./jsonUtils-714f7856.js";import"./DictionaryLoader-7f74ef6b.js";import"./LRUCache-7d328c48.js";import"./MemCache-c220a92a.js";import"./deprecate-0efb6d09.js";import"./heatmapUtils-74b8fd48.js";import"./vec4f64-aa64c7e9.js";import"./serviceCapabilitiesUtils-2296548c.js";import"./arcgisLayerUrl-824ee458.js";import"./QueryTask-59651cf2.js";import"./Query-8c2b9d22.js";import"./Field-899dc481.js";import"./fieldType-68c65bf7.js";import"./normalizeUtils-08ce1e14.js";import"./normalizeUtilsCommon-42c6cdb7.js";import"./executeForIds-1528d522.js";import"./query-b41db307.js";import"./pbfQueryUtils-718fed42.js";import"./pbf-9196f6ce.js";import"./OptimizedFeature-6361f5d1.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-22ca074d.js";import"./zscale-92e5f59b.js";import"./executeQueryJSON-ad10aa61.js";import"./FeatureSet-a47eef0a.js";import"./featureConversionUtils-93a98860.js";import"./aaBoundingRect-062d7c89.js";import"./FeatureType-f3fd3327.js";import"./FeatureTemplate-136fba4c.js";import"./FieldsIndex-b8dc9788.js";import"./labelingInfo-8ec658bf.js";import"./labelUtils-4db1d7ec.js";import"./defaultsJSON-b087dd4d.js";import"./AttachmentQuery-dffd8fdc.js";import"./popupUtils-eff4732c.js";import"./parser-7deabd3b.js";import"./mat4-63147b80.js";import"./ElevationInfo-5422702b.js";import"./PortalItem-d79345ac.js";import"./assets-86d142ff.js";import"./portalItemUtils-9126718d.js";import"./projection-03688518.js";import"./floorFilterUtils-080a7cd2.js";import"./datetime-b6333958.js";let i=class extends V(K(H(_(q(A(D(C(E(G(J(z(I(U))))))))))))){constructor(...t){super(...t),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(t,o){return typeof t=="string"?{url:t,...o}:t}load(t){const o=T(t)?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch(R).then(()=>this._fetchService(o))),Promise.resolve(this)}readImageFormat(t,o){const n=o.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(t,o,n,e){var h;if(!this.loaded||!t)return;const a=t.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let m=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=v(e.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;m=x(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");m=x(a,c.sublayers,v(c.origin))}}const l=[],d={writeSublayerStructure:m,...e};let y=m;a.forEach(r=>{const c=r.write({},d);l.push(c),y=y||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(o.layers=l),y&&(o.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(t,o,n,e){const a=e&&e.pixelRatio||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian());const m=new W({layer:this,floors:e==null?void 0:e.floors,scale:N({extent:t,width:o})*a}),l=m.toJSON();m.destroy();const d=!e||!e.rotation||this.version<10.3?{}:{rotation:-e.rotation},y=t&&t.spatialReference,h=y.wkid||JSON.stringify(y.toJSON());l.dpi*=a;const r={};if(e!=null&&e.timeExtent){const{start:c,end:u}=e.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:t&&t.xmin+","+t.ymin+","+t.xmax+","+t.ymax,bboxSR:h,imageSR:h,size:o+","+n,...l,...d,...r}}async fetchImage(t,o,n,e){const{data:a}=await this._fetchImage("image",t,o,n,e);return a}async fetchImageBitmap(t,o,n,e){const{data:a,url:m}=await this._fetchImage("blob",t,o,n,e);return Z(a,m)}async fetchRecomputedExtents(t={}){const o={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,o),{extent:e,fullExtent:a,timeExtent:m}=n,l=e||a;return{fullExtent:l&&P.fromJSON(l),timeExtent:m&&$.fromJSON({start:m[0],end:m[1]})}}loadAll(){return O(this,t=>{t(this.allSublayers)})}serviceSupportsSpatialReference(t){return Q(this,t)}async _fetchImage(t,o,n,e,a){var d,y,h;const m={responseType:t,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(o,n,e,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((d=m.query)==null?void 0:d.dynamicLayers)!=null&&!((h=(y=this.capabilities)==null?void 0:y.exportMap)!=null&&h.supportsDynamicLayers))throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:m.query});try{const{data:r}=await g(l,m);return{data:r,url:l}}catch(r){throw M(r)?r:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:o,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=o,this.read(o,{origin:"service",url:this.parsedUrl})}};s([p({type:S})],i.prototype,"dateFieldsTimeReference",void 0),s([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),s([p()],i.prototype,"dpi",void 0),s([p()],i.prototype,"gdbVersion",void 0),s([p()],i.prototype,"imageFormat",void 0),s([j("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),s([p()],i.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([p({type:S})],i.prototype,"preferredTimeReference",void 0),s([p()],i.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),s([F("sublayers",{layers:{type:[k]},visibleLayers:{type:[L]}})],i.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),s([p(B)],i.prototype,"url",void 0),i=s([w("esri.layers.MapImageLayer")],i);const ne=i;export{ne as default};
