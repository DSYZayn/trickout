import{e as h,y as d,a as E,v as $}from"./cast-4d1aa82d.js";import"./string-bf9c68ed.js";import{x as P,f as v,w as W,E as N}from"./promiseUtils-3ce2a460.js";import"./ensureType-8c80e8c7.js";import"./typedArrayUtil-c81d173a.js";import{u as H,f as z}from"./aaBoundingRect-062d7c89.js";import{b as q}from"./Extent-52b65909.js";import{j as T}from"./TileInfo-3f2956cd.js";import{R as C}from"./Bitmap-044822eb.js";import{h as I}from"./TileStore-4f504952.js";import{e as j}from"./TileKey-3acb01a1.js";const B=Math.PI/180;function O(e){return e*B}function U(e,i){const r=O(i.rotation),t=Math.abs(Math.cos(r)),s=Math.abs(Math.sin(r)),[o,n]=i.size;return e[0]=Math.round(n*s+o*t),e[1]=Math.round(n*t+o*s),e}function A(e,i,r,t){const[s,o]=i,[n,a]=t,l=.5*r;return e[0]=s-l*n,e[1]=o-l*a,e[2]=s+l*n,e[3]=o+l*a,e}const u=H(),c=[0,0],w=new j(0,0,0,0),y={container:null,fetchSource:null,requestUpdate:null,imageMaxWidth:2048,imageMaxHeight:2048,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1};let p=class extends ${constructor(e){super(e),this._imagePromise=null,this.bitmaps=[],this.hidpi=y.hidpi,this.imageMaxWidth=y.imageMaxWidth,this.imageMaxHeight=y.imageMaxHeight,this.imageRotationSupported=y.imageRotationSupported,this.imageNormalizationSupported=y.imageNormalizationSupported,this.update=P(async(i,r)=>{if(v(r),!i.stationary||this.destroyed)return;const t=i.state,s=q(t.spatialReference),o=this.hidpi?i.pixelRatio:1,n=this.imageNormalizationSupported&&t.worldScreenWidth&&t.worldScreenWidth<t.size[0],a=this.imageMaxWidth??0,l=this.imageMaxHeight??0;n?(c[0]=t.worldScreenWidth,c[1]=t.size[1]):this.imageRotationSupported?(c[0]=t.size[0],c[1]=t.size[1]):U(c,t);const S=Math.floor(c[0]*o)>a||Math.floor(c[1]*o)>l,M=s&&(t.extent.xmin<s.valid[0]||t.extent.xmax>s.valid[1]),f=!this.imageNormalizationSupported&&M,_=!S&&!f,x=this.imageRotationSupported?t.rotation:0,b=this.container.children.slice();if(_){const m=n?t.paddedViewState.center:t.center;this._imagePromise&&console.error("Image promise was not defined!"),this._imagePromise=this._singleExport(t,c,m,t.resolution,x,o,r)}else{let m=Math.min(a,l);f&&(m=Math.min(t.worldScreenWidth,m)),this._imagePromise=this._tiledExport(t,m,o,r)}try{const m=await this._imagePromise??[];v(r);const R=[];if(this._imagePromise=null,this.destroyed)return;this.bitmaps=m;for(const g of b)m.includes(g)||R.push(g.fadeOut().then(()=>{g.remove(),g.destroy()}));for(const g of m)R.push(g.fadeIn());await Promise.all(R)}catch(m){this._imagePromise=null,W(m)}},5e3),this.updateExports=P(async i=>{const r=[];for(const t of this.container.children){if(!t.visible||!t.stage)return;r.push(i(t).then(()=>{t.invalidateTexture(),t.requestRender()}))}this._imagePromise=N(r).then(()=>this._imagePromise=null),await this._imagePromise})}destroy(){this.bitmaps.forEach(e=>e.destroy()),this.bitmaps=[]}get updating(){return!this.destroyed&&this._imagePromise!==null}async _export(e,i,r,t,s,o){const n=await this.fetchSource(e,Math.floor(i*s),Math.floor(r*s),{rotation:t,pixelRatio:s,signal:o});v(o);const a=new C(null,{immutable:!0,requestRenderOnSourceChangedEnabled:!0});return a.x=e.xmin,a.y=e.ymax,a.resolution=e.width/i,a.rotation=t,a.pixelRatio=s,a.opacity=0,this.container.addChild(a),await a.setSourceAsync(n,o),v(o),a}async _singleExport(e,i,r,t,s,o,n){A(u,r,t,i);const a=z(u,e.spatialReference);return[await this._export(a,i[0],i[1],s,o,n)]}_tiledExport(e,i,r,t){const s=T.create({size:i,spatialReference:e.spatialReference,scales:[e.scale]}),o=new I(s),n=o.getTileCoverage(e);if(!n)return null;const a=[];return n.forEach((l,S,M,f)=>{w.set(l,S,M,0),o.getTileBounds(u,w);const _=z(u,e.spatialReference);a.push(this._export(_,i,i,0,r,t).then(x=>(f!==0&&(w.set(l,S,M,f),o.getTileBounds(u,w),x.x=u[0],x.y=u[3]),x)))}),Promise.all(a)}};h([d()],p.prototype,"_imagePromise",void 0),h([d()],p.prototype,"bitmaps",void 0),h([d()],p.prototype,"container",void 0),h([d()],p.prototype,"fetchSource",void 0),h([d()],p.prototype,"hidpi",void 0),h([d()],p.prototype,"imageMaxWidth",void 0),h([d()],p.prototype,"imageMaxHeight",void 0),h([d()],p.prototype,"imageRotationSupported",void 0),h([d()],p.prototype,"imageNormalizationSupported",void 0),h([d()],p.prototype,"requestUpdate",void 0),h([d()],p.prototype,"updating",null),p=h([E("esri.views.2d.layers.support.ExportStrategy")],p);const Z=p;export{Z as v};
