import{e as m,a as p}from"./cast-4d1aa82d.js";import"./Error-9392329b.js";import"./ensureType-8c80e8c7.js";import"./typedArrayUtil-c81d173a.js";import"./string-bf9c68ed.js";import{l as a,u as l}from"./heatmapUtils-74b8fd48.js";import{n as h}from"./BitmapTileContainer-49487a9f.js";import{o as d}from"./BaseTileRenderer-0cd73adf.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-3ce2a460.js";import"./mathUtils-505ef34b.js";import"./screenUtils-7afeb41c.js";import"./vec4f64-aa64c7e9.js";import"./aaBoundingRect-062d7c89.js";import"./Extent-52b65909.js";import"./mat3f32-6c416b1c.js";import"./Bitmap-044822eb.js";import"./mat3-5b850236.js";import"./vec2f32-eaf29605.js";import"./Container-782a7f3a.js";import"./parser-7deabd3b.js";import"./colorUtils-639f4d25.js";import"./mat4-63147b80.js";import"./Evented-d69b5d66.js";import"./definitions-19bfb61c.js";import"./enums-64ab819c.js";import"./Texture-5c56cee1.js";import"./context-util-2fc70f17.js";import"./TiledDisplayObject-76821229.js";import"./TileKey-3acb01a1.js";import"./WGLContainer-12d66f96.js";import"./VertexArrayObject-2b4e90de.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-349a3ca2.js";import"./enums-4b2a86a0.js";import"./enums-b1d611e3.js";import"./ProgramTemplate-b518276b.js";import"./MaterialKey-8f458904.js";import"./utils-45a97d77.js";import"./Color-46910694.js";import"./StyleDefinition-7d58136b.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./reactiveUtils-989a8d7f.js";import"./earcut-61f7b102.js";import"./vec2-3a431caf.js";import"./vec2f64-22afc56f.js";import"./featureConversionUtils-93a98860.js";import"./aaBoundingBox-55a55434.js";import"./jsonUtils-e2434b33.js";import"./Polyline-7f90e3cc.js";import"./OptimizedFeature-6361f5d1.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./TileContainer-04cf618b.js";import"./HandleOwner-1ffa4597.js";class c{constructor(){this.gradient=null,this.height=512,this.intensities=null,this.width=512}render(i){a(i,512,this.intensities,this.gradient,this.minDensity,this.maxDensity)}}let s=class extends d{constructor(t){super(t),this._intensityInfo={minDensity:0,maxDensity:0},this.type="heatmap",this.featuresView={attributeView:{initialize:()=>{},requestUpdate:()=>{}},requestRender:()=>{}},this._container=new h(t.tileInfoView)}createTile(t){const i=this._container.createTile(t);return this.tileInfoView.getTileCoords(i.bitmap,t),i.bitmap.resolution=this.tileInfoView.getTileResolution(t),i}onConfigUpdate(){const t=this.layer.renderer;if(t.type==="heatmap"){const{minDensity:i,maxDensity:r,colorStops:n}=t;this._intensityInfo.minDensity=i,this._intensityInfo.maxDensity=r,this._gradient=l(n),this.tiles.forEach(o=>{const e=o.bitmap.source;e&&(e.minDensity=i,e.maxDensity=r,e.gradient=this._gradient,o.bitmap.invalidateTexture())})}}hitTest(){return Promise.resolve([])}install(t){t.addChild(this._container)}uninstall(t){this._container.removeAllChildren(),t.removeChild(this._container)}disposeTile(t){this._container.removeChild(t),t.destroy()}supportsRenderer(t){return t&&t.type==="heatmap"}onTileData(t){const i=this.tiles.get(t.tileKey);if(!i)return;const r=t.intensityInfo,{minDensity:n,maxDensity:o}=this._intensityInfo,e=i.bitmap.source||new c;e.intensities=r&&r.matrix||null,e.minDensity=n,e.maxDensity=o,e.gradient=this._gradient,i.bitmap.source=e,this._container.addChild(i),this._container.requestRender(),this.requestUpdate()}onTileError(t){console.error(t)}lockGPUUploads(){}unlockGPUUploads(){}fetchResource(t,i){return console.error(t),Promise.reject()}};s=m([p("esri.views.2d.layers.features.tileRenderers.HeatmapTileRenderer")],s);const yt=s;export{yt as default};
