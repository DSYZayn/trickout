import{e as b,y as D,a as Ge,v as qe}from"./cast-4d1aa82d.js";import{d as _e,V as Ze,Z as Ne,c as Ye}from"./ExpandedCIM-9a9f682e.js";import{a as Xe}from"./HandleOwner-1ffa4597.js";import{h as Qe}from"./string-bf9c68ed.js";import{r as T,e as We,t as z,i as Je}from"./typedArrayUtil-c81d173a.js";import{f as v,j as K,w as ve}from"./promiseUtils-3ce2a460.js";import{l as et}from"./reactiveUtils-989a8d7f.js";import"./ensureType-8c80e8c7.js";import{b as V,f as tt}from"./Extent-52b65909.js";import{u as C,q as se,E as st,e as it,s as rt,l as ot}from"./aaBoundingRect-062d7c89.js";import{v as nt,r as at,c as lt,g as ht}from"./Polyline-7f90e3cc.js";import{c as ye,y as de,f as be,u as De,s as Ce,l as ie}from"./jsonUtils-e2434b33.js";import{p as dt}from"./normalizeUtilsSync-87c5ef07.js";import{f as ct,g as ut}from"./projectionSupport-26ba0ab6.js";import{O as ft,j as pt,N as mt}from"./labelingInfo-0e7e440a.js";import{U as yt}from"./definitions-19bfb61c.js";import{S as Oe}from"./enums-b1d611e3.js";import{x as ge,F as Y,j as ce,H as gt,Y as xt,P as J,R as _t,t as vt}from"./color-349a3ca2.js";import{f as bt,E as we}from"./VertexArrayObject-2b4e90de.js";import{F as Dt}from"./enums-64ab819c.js";import{m as Ct,i as wt}from"./AttributeStoreView-dcb739c3.js";import{U as Tt}from"./MaterialKey-8f458904.js";import{a as X,o as Bt,x as Ft,n as St,i as Rt,E as It}from"./Matcher-c9075c7b.js";import{w as Te,$ as Mt}from"./schemaUtils-5cba5948.js";import{c as Lt,r as zt,M as $t}from"./ComputedAttributeStorage-3b1fa8e7.js";import{r as At,H as Gt,g as Ot,m as Ut,C as Pt}from"./featureConversionUtils-93a98860.js";import{b as Vt}from"./FeatureSetReader-0b7eb9fe.js";import{u as E}from"./screenUtils-7afeb41c.js";import{i as jt}from"./rbush-f2a85c98.js";import{U as kt}from"./normalizeUtils-78f35d29.js";import{O as Kt,U as A}from"./quantizationUtils-54fe414b.js";import{t as Ue}from"./OptimizedFeature-6361f5d1.js";import"./mat2d-795519e1.js";import"./vec2-3a431caf.js";import"./vec2f32-eaf29605.js";import{s as Et}from"./Identifiable-a49d7533.js";import{l as Ht}from"./capabilities-55572a33.js";import{createSymbolSchema as qt}from"./createSymbolSchema-8b7065b5.js";const y=-1;let Be=class{constructor(){this._dirties=[{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1}]}hasDirty(){return this._dirties.some(e=>e.indexCount!==y||e.allDirty)}markAllClean(){for(const e of this._dirties)e.indexFrom=y,e.indexCount=y,e.vertexFrom=y,e.vertexCount=y,e.allDirty=!1}markAllDirty(){for(const e of this._dirties)e.allDirty=!0}forEach(e){for(let t=0;t<this._dirties.length;++t){const{indexCount:s,indexFrom:i,vertexCount:r,vertexFrom:o,allDirty:a}=this._dirties[t],d={};let l,h=!1;(a||o!==y&&r>0)&&(d.geometry={count:r,from:o,allDirty:a},h=!0),(a||i!==y&&s>0)&&(l={count:s,from:i,allDirty:a},h=!0),h&&e({indices:l,vertices:d},t)}}markDirtyIndices(e,t,s){const i=this._dirties[e],r=t,o=s;if(!i.allDirty)if(i.indexCount!==y){const a=Math.min(i.indexFrom,r),d=Math.max(i.indexFrom+i.indexCount,r+o)-a;i.indexFrom=a,i.indexCount=d}else i.indexFrom=r,i.indexCount=o}markDirtyVertices(e,t,s,i){const r=this._dirties[e],o=s,a=i;if(!r.allDirty)if(r.vertexCount!==y){const d=Math.min(r.vertexFrom,o),l=Math.max(r.vertexFrom+r.vertexCount,o+a)-d;r.vertexFrom=d,r.vertexCount=l}else r.vertexFrom=o,r.vertexCount=a}},Zt=class{get largestRange(){return this._largestRange}constructor(e){this._largestRange=null,this._parent=e,this._updateLargestRange()}rangeCreated(e){(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}rangeResized(e,t){e===this._largestRange?e.count<t&&this._updateLargestRange():(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}findBestRange(e){let t=this._parent._freeHead,s=null;for(;t!==null;)t.count>=e&&(!s||t.count-e<s.count-e)&&(s=t),t=t.next;return s}findAdjacentRanges(e,t){let s=!0,i=!1,r=null,o=this._parent._freeHead;for(;s&&!i;){const a=r!==null?r.from+r.count:0,d=o!==null?o.from:this._parent._size;e>=a&&e+t<=d?(s=!1,i=!0):o!==null?(r=o,o=o.next):s=!1}return[r,o]}_updateLargestRange(){let e=null,t=this._parent._freeHead;for(;t!==null;)(!e||t.count>e.count)&&(e=t),t=t.next;this._largestRange=e}},H=class L{constructor(e,t){this._allocated=0,this._size=e,this._freeHead=e>0?{from:0,count:e,prev:null,next:null}:null,this._bookKeeper=t||new Zt(this),this._freeHead&&this._bookKeeper.rangeCreated(this._freeHead)}allocate(e){const t=this._bookKeeper.findBestRange(e);if(t==null)return-1;const s=t.from,i=t.count;if(t.from+=e,t.count-=e,this._bookKeeper.rangeResized(t,s,i),this._allocated+=e,t.count===0){const r=t.prev!==null?this._freeHead:t.next;L._removeRange(t),this._freeHead=r}return s}free(e,t){const[s,i]=this._bookKeeper.findAdjacentRanges(e,t),r={from:e,count:t,prev:s??null,next:i??null};if(s!=null&&(s.next=r),i!=null&&(i.prev=r),this._bookKeeper.rangeCreated(r),this._allocated-=t,i!=null&&r.from+r.count===i.from){const o=r.from,a=r.count;L._fuse(r,i),L._removeRange(i),this._bookKeeper.rangeResized(r,o,a),this._bookKeeper.rangeResized(i,void 0,0)}if(s!=null&&s.from+s.count===r.from){const o=s.from,a=s.count;L._fuse(s,r),L._removeRange(r),this._bookKeeper.rangeResized(s,o,a),this._bookKeeper.rangeResized(r,void 0,0)}this._freeHead=r.prev!==null?this._freeHead:r}get fragmentation(){const e=this._size-this._allocated;return e===0?0:1-this._bookKeeper.largestRange.count/e}static _removeRange(e){e.prev!==null?e.next!==null?(e.prev.next=e.next,e.next.prev=e.prev):e.prev.next=null:e.next!==null&&(e.next.prev=null)}static _fuse(e,t){e.count+=t.count,e.next=t.next,t.from+=t.count,t.count=0,t.next!==null&&(t.next.prev=e)}};const U=["FILL","LINE","MARKER","TEXT","LABEL"];function Nt(n){const e=n.getStrides(),t={};for(let s=0;s<e.length;s++)t[U[s]]=e[s];return t}const Fe=.5;let Se=class Pe{constructor(e,t,s,i){this._strides=e,this._displayList=t,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const r in e){this._freeListsAndStorage[r]={vtxFreeList:i?new H(i):null,idxFreeList:i?new H(i):null,vertexBuffers:{},indexBuffer:i?new Uint32Array(i):null};for(const o in e[r])this._freeListsAndStorage[r].vertexBuffers[o]={data:i?ge(i,e[r][o]):null,stride:e[r][o]}}}static fromTileData(e,t){var d;const s=Nt(e),i=[0,0,0,0,0],r=[0,0,0,0,0];for(const l of e.tileDisplayData.displayObjects)for(const h of l.displayRecords)i[h.geometryType]=Math.max(i[h.geometryType],h.vertexFrom+h.vertexCount),r[h.geometryType]=Math.max(r[h.geometryType],h.indexFrom+h.indexCount);const o=new Pe(s,e.tileDisplayData.displayList,t,void 0),a=((d=e.tileBufferData)==null?void 0:d.geometries)??[];for(let l=0;l<a.length;++l){const h=i[l],c=r[l],u=a[l],f=U[l],m=o._storageFor(f),p=a[l].indexBuffer;m.indexBuffer=p,m.idxFreeList=new H(p.length),m.idxFreeList.allocate(c);let g=0;for(const _ in u.vertexBuffer){const x=a[l].vertexBuffer[_];m.vertexBuffers[_].data=x.data,m.vertexBuffers[_].stride=x.stride;const S=Y(x.stride),k=x.data.length*S/x.stride;g||(g=k)}m.vtxFreeList=new H(g),m.vtxFreeList.allocate(h)}return o}delete(e){const t=U[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,s,i,r){const o=U[e.geometryType];let a,d;e.meshData=null,e.vertexFrom===void 0?(d=t.vertexCount,a=this._allocateVertices(o,d)):t.vertexCount>e.vertexCount?(this._freeVertices(o,e.vertexFrom,e.vertexCount),d=t.vertexCount,a=this._allocateVertices(o,d)):t.vertexCount===e.vertexCount?(a=e.vertexFrom,d=e.vertexCount):(this._freeVertices(o,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),a=e.vertexFrom,d=t.vertexCount);let l,h,c,u=!0;if(e.indexFrom===void 0?(l=r,c=t.indexCount,h=this._allocateIndices(o,c)):t.indexCount>e.indexCount?(l=this._displayList.removeFromList(e),this._freeIndices(o,e.indexFrom,e.indexCount),c=t.indexCount,h=this._allocateIndices(o,c)):t.indexCount===e.indexCount?(u=!1,h=e.indexFrom,c=e.indexCount):(l=this._displayList.removeFromList(e),this._freeIndices(o,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),h=e.indexFrom,c=t.indexCount),a!==-1&&h!==-1){const f=this._storageFor(o);if(ce(a,h,f.vertexBuffers,f.indexBuffer,t,s,i),e.vertexFrom=a,e.indexFrom=h,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const m in s)this._dirtyMap.markDirtyVertices(e.geometryType,m,e.vertexFrom,e.vertexCount)}return u&&this._displayList.addToList(e,l),!0}return a!==-1&&this._freeVertices(o,a,d),h!==-1&&this._freeIndices(o,h,c),e.setMeshDataFromBuffers(t,s,i),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const s=t.vertexBuffer,i=t.indexBuffer,r=U[e.geometryType],o=this._allocateVertices(r,e.vertexCount);if(o===-1)return this._freeVertices(r,o,e.vertexCount),!1;const a=this._allocateIndices(r,e.indexCount);if(a===-1)return this._freeVertices(r,o,e.vertexCount),this._freeIndices(r,a,e.indexCount),!1;const d=this._storageFor(r);if(ce(o,a,d.vertexBuffers,d.indexBuffer,e,s,i),e.vertexFrom=o,e.indexFrom=a,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const l in s)this._dirtyMap.markDirtyVertices(e.geometryType,l,o,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){var o,a;const s=this._storageFor(e),i=(o=s.vtxFreeList)==null?void 0:o.allocate(t);if(i==null||i===-1)return-1;const r=(a=s.vtxFreeList)==null?void 0:a.fragmentation;return r==null||r>Fe?-1:i}_freeVertices(e,t,s){var i;(i=this._storageFor(e).vtxFreeList)==null||i.free(t,s)}_freeIndices(e,t,s){var i;(i=this._storageFor(e).idxFreeList)==null||i.free(t,s)}_allocateIndices(e,t){var o,a;const s=this._storageFor(e),i=(o=s.idxFreeList)==null?void 0:o.allocate(t);if(i==null||i===-1)return-1;const r=(a=s.idxFreeList)==null?void 0:a.fragmentation;return r==null||r>Fe?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}},Yt=class{constructor(e){this.geometryMap=gt(()=>({indexBuffer:we.createIndex(e,Dt.STATIC_DRAW),vao:null}),(t,s)=>({vertexBuffer:we.createVertex(e,xt[s])}))}dispose(){for(let e=0;e<5;e++){const t=this.geometryMap[e];if(t){t.data.vao&&t.data.vao.dispose(!1),t.data.indexBuffer&&t.data.indexBuffer.dispose();for(const s in t.buffers)t.buffers[s]&&t.buffers[s].data.vertexBuffer.dispose()}}}get(e){const t=this.geometryMap[e];return{getVAO(s,i,r){if(!t.data.vao){const o={};for(const a in t.buffers)o[a]=t.buffers[a].data.vertexBuffer;t.data.vao=new bt(s,r,i,o,t.data.indexBuffer)}return t.data.vao}}}has(e){return this.geometryMap[e]!=null}upload(e,t){t.forEach((s,i)=>{this._upload(s,i,e)})}_upload(e,t,s){if(e.indices&&(e.indices.allDirty?this._uploadIndices(s,t):e.indices.from!=null&&e.indices.count!=null&&this._uploadIndices(s,t,e.indices.from,e.indices.count)),e.vertices){const i=e.vertices;for(const r in i){const o=i[r];o.allDirty?this._uploadVertices(s,t,r):o.from!=null&&o.count!=null&&this._uploadVertices(s,t,r,o.from,o.count)}}}_uploadVertices(e,t,s,i,r){const o=this.geometryMap[t];if(!o)return;const a=e.geometries[t].vertexBuffer[s];if(!a)return;const{data:d,stride:l}=a;if(o.buffers[s]&&d.length>0){const h=l/d.BYTES_PER_ELEMENT;i!=null&&r!=null?o.buffers[s].data.vertexBuffer.setSubData(d,i*h,i*h,(i+r)*h):o.buffers[s].data.vertexBuffer.setData(d)}}_uploadIndices(e,t,s,i){const r=this.geometryMap[t];if(!r)return;const o=e.geometries[t].indexBuffer;r.data.indexBuffer&&o.length>0&&(s!=null&&i!=null?r.data.indexBuffer.setSubData(o,s,s,s+i):r.data.indexBuffer.setData(o))}};class Xt extends Ct{constructor(){super(...arguments),this._data=null,this._displayList=null,this._lastCommitTime=0,this._hasData=!1,this._invalidated=!1,this._wglBuffers=null,this._dirtyMap=new Be}destroy(){super.destroy(),this.clear()}get hasData(){return!!this._hasData}get displayObjects(){return this._displayObjects??[]}getGeometry(e){return this._wglBuffers&&this._wglBuffers.has(e)?this._wglBuffers.get(e):null}getDisplayList(){return this._displayList}patch(e){var i,r;if(e.clear===!0)return this.clear(),void(this._hasData=!1);const t=e.addOrUpdate,s=e.remove;!this._data&&t&&((i=t.tileDisplayData)!=null&&i.displayObjects.length)?(t.tileDisplayData.computeDisplayList(),this._dirtyMap=new Be,this._dispRecStore=Se.fromTileData(t,this._dirtyMap),this._data=t,this._dirtyMap.markAllDirty(),this._hasData=!0,e.end&&this.ready()):this._data&&(t&&((r=t.tileDisplayData)!=null&&r.displayObjects.length)||s.length)?this._doPatchData(e):e.end&&this.ready(),e.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}commit(e){e.time&&e.time===this._lastCommitTime||(this._lastCommitTime=e.time,this.visible&&this._data&&(this._wglBuffers||(this._wglBuffers=new Yt(e.context)),(this._dirtyMap.hasDirty()||this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._dirtyMap.markAllClean())))}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(e){this._invalidated=!0,this._patchData(e)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=Se.fromTileData(this._data,this._dirtyMap)),this.requestRender()}_patchData(e){let t=!0;const s=e.addOrUpdate&&e.addOrUpdate.tileDisplayData&&e.addOrUpdate.tileDisplayData.displayObjects||[],i=(e.remove||[]).slice();for(const a of s)a.insertAfter!=null&&i.push(a.id);let r;i.length>0&&(r=new Set(i));const o=this._data.tileDisplayData;for(const a of i){const d=o.displayObjectRegistry.get(a);if(d){o.displayList.removeFromList(d.displayRecords);for(const l of d.displayRecords)this._dispRecStore.delete(l);o.displayObjectRegistry.delete(a)}}r!=null&&r.size&&(o.displayObjects=o.displayObjects.filter(a=>!r.has(a.id)));for(const a of s){let d,l=o.displayObjectRegistry.get(a.id);if(l){const c=l.displayRecords;l.set(a),l.displayRecords=c;const u=l.displayRecords.length;for(let f=0;f<u;++f){const m=l.displayRecords[f],p=a.displayRecords[f];(f>=a.displayRecords.length||m.geometryType!==p.geometryType||m.symbolLevel!==p.symbolLevel||m.zOrder!==p.zOrder||m.materialKey!==p.materialKey)&&(this._dispRecStore.delete(l.displayRecords[f]),f<a.displayRecords.length&&(l.displayRecords[f]=void 0))}l.displayRecords.length=a.displayRecords.length}else{let c;l=a.copy(),l.displayRecords=[],o.displayObjectRegistry.set(a.id,l);const u=o.displayObjects;if(l.insertAfter!=null)if(d={},l.insertAfter>=0){const f=o.displayObjectRegistry.get(l.insertAfter);f?(c=u.indexOf(f)+1,c<u.length?u.splice(c,0,l):(u.push(l),c=u.length)):(u.push(l),c=u.length)}else u.unshift(l),c=0;else u.push(l),c=u.length;if(d){const f=a.displayRecords.length>0?1:0;let m=0;for(let p=c-1;p>=0&&m<f;--p)for(let g=u[p].displayRecords.length-1;g>=0&&m<f;--g){const _=u[p].displayRecords[g],x=o.displayList.getDPInfoType();d[x]||(d[x]=_,++m)}}}const h=a.displayRecords.length;for(let c=0;c<h;++c){const u=a.displayRecords[c];let f=l.displayRecords[c];f?(f.meshData=u.meshData,f.materialKey=u.materialKey):(f=u.copy(),f.vertexFrom=void 0,f.indexFrom=void 0,l.displayRecords[c]=f);const m=u.geometryType,p=o.displayList.getDPInfoType(),g=e.addOrUpdate.tileBufferData.geometries[m],_=g.vertexBuffer,x=g.indexBuffer;let S;d&&(S=d[p]?o.displayList.splitAfter(d[p]):-1),t=this._dispRecStore.setMeshData(f,u,_,x,S)&&t,d&&f.indexFrom!=null&&f.indexFrom!=null&&(d[p]=f)}}return t}}let Ve=class{constructor(){this._byGeometryType=null}get satisfied(){return!this._byGeometryType}reset(){this._byGeometryType=null}verticesFor(e){return this._byGeometryType?this._byGeometryType[e].vertices:0}indicesFor(e){return this._byGeometryType?this._byGeometryType[e].indices:0}needMore(e,t,s){if(!t&&!s)return;this._byGeometryType||(this._byGeometryType=[{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0}]);const i=this._byGeometryType[e];i.vertices+=t,i.indices+=s}};const re=5;let oe=class ue{constructor(){this.geometries=[{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}}]}clone(){const e=new ue;for(let t=0;t<this.geometries.length;t++){const s=this.geometries[t],i=e.geometries[t];i.indexBuffer=s.indexBuffer.slice(),i.vertexBuffer={};for(const r in s.vertexBuffer){const{data:o,stride:a}=s.vertexBuffer[r];i.vertexBuffer[r]={data:o.slice(),stride:a}}}return e}static deserialize(e){const t=new ue;for(let s=0;s<re;++s){t.geometries[s].indexBuffer=new Uint32Array(e.geometries[s].indexBuffer),t.geometries[s].vertexBuffer={};for(const i in e.geometries[s].vertexBuffer)t.geometries[s].vertexBuffer[i]={data:J(e.geometries[s].vertexBuffer[i].data,e.geometries[s].vertexBuffer[i].stride),stride:e.geometries[s].vertexBuffer[i].stride}}return t}serialize(){const e={geometries:[{indexBuffer:this.geometries[0].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[1].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[2].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[3].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[4].indexBuffer.buffer,vertexBuffer:{}}]};for(let t=0;t<re;++t)for(const s in this.geometries[t].vertexBuffer)e.geometries[t].vertexBuffer[s]={data:this.geometries[t].vertexBuffer[s].data.buffer,stride:this.geometries[t].vertexBuffer[s].stride};return e}getBuffers(){const e=[];for(let t=0;t<re;++t){e.push(this.geometries[t].indexBuffer.buffer);for(const s in this.geometries[t].vertexBuffer)e.push(this.geometries[t].vertexBuffer[s].data.buffer)}return e}};function q(n,e,t,...s){e<n.length?n.splice(e,t,...s):n.push(...s)}let Qt=class je{constructor(){this.symbolLevels=[]}replay(e,t,s){for(const i of this.symbolLevels)for(const r of i.zLevels){const o=r.geometryDPInfo.unified;if(o)for(const a of o){const{geometryType:d,materialKey:l,indexFrom:h,indexCount:c}=a,u=Tt.load(l).symbologyType,f=e.painter.getBrush(d,u),m={geometryType:d,materialKey:l,indexFrom:h,indexCount:c,target:t.getGeometry(d)};f.prepareState(e),f.drawGeometry(e,t,m,s)}}}get empty(){return!this.symbolLevels||this.symbolLevels.length===0}clear(){this.symbolLevels.length=0}addToList(e,t){if(Array.isArray(e))for(const s of e)this._addToList(s,t);else this._addToList(e,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const s of e)t=this._removeFromList(s);return t}clone(){const e=new je;for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder),s=t.length,i=e.indexFrom+e.indexCount;for(let r=0;r<s;++r){const o=t[r];if(o.geometryType===e.geometryType&&i>o.indexFrom&&i<=o.indexFrom+o.indexCount){if(i<o.indexFrom+o.indexCount){const a=new ne;a.geometryType=o.geometryType,a.materialKey=o.materialKey,a.indexFrom=i,a.indexCount=o.indexFrom+o.indexCount-i,t.splice(r+1,0,a),o.indexCount=i-o.indexFrom}return r}}}_addToList(e,t){const s=e.symbolLevel,i=e.zOrder,r=this._getDisplayList(s,i),o=t??r.length-1,a=o>=0&&o<r.length?r[o]:null;if(a!==null&&a.materialKey===e.materialKey&&a.indexFrom+a.indexCount===e.indexFrom&&a.geometryType===e.geometryType)a.indexCount+=e.indexCount;else{const d=new ne;d.indexFrom=e.indexFrom,d.indexCount=e.indexCount,d.materialKey=e.materialKey,d.geometryType=e.geometryType,q(r,o+1,0,d)}}_removeFromList(e){const t=e.symbolLevel,s=e.zOrder,i=this._getDisplayList(t,s),r=i.length;let o;for(let a=0;a<r;++a){const d=i[a];if(e.indexFrom+e.indexCount>d.indexFrom&&e.indexFrom<d.indexFrom+d.indexCount&&d.geometryType===e.geometryType){o=a;break}}if(o!==void 0){const a=i[o];if(e.indexFrom===a.indexFrom)return a.indexCount-=e.indexCount,a.indexFrom+=e.indexCount,a.indexCount===0&&q(i,o,1),o-1;if(e.indexFrom+e.indexCount===a.indexFrom+a.indexCount)return a.indexCount-=e.indexCount,a.indexCount===0?(q(i,o,1),o-1):o;{const d=a.indexFrom,l=e.indexFrom-a.indexFrom,h=e.indexCount,c=a.indexFrom+a.indexCount-(e.indexFrom+e.indexCount);a.indexCount=l;const u=new ne;return u.geometryType=a.geometryType,u.materialKey=a.materialKey,u.indexFrom=d+l+h,u.indexCount=c,q(i,o+1,0,u),o}}return null}_getDisplayList(e,t){let s;const i=this.symbolLevels.length;for(let a=0;a<i;a++)if(this.symbolLevels[a].symbolLevel===e){s=this.symbolLevels[a];break}let r;s||(s=new xe,s.symbolLevel=e,this.symbolLevels.push(s));const o=s.zLevels.length;for(let a=0;a<o;a++)if(s.zLevels[a].zLevel===t){r=s.zLevels[a];break}return r||(r=new Wt,r.geometryDPInfo=new te,r.zLevel=t,s.zLevels.push(r)),r.geometryDPInfo.unified||(r.geometryDPInfo.unified=[]),r.geometryDPInfo.unified}getDPInfoType(){return"unified"}},ne=class ke{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new ke;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}};class te{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new te;return e.fill=this.fill&&this.fill.map(t=>t.clone()),e.line=this.line&&this.line.map(t=>t.clone()),e.marker=this.marker&&this.marker.map(t=>t.clone()),e.text=this.text&&this.text.map(t=>t.clone()),e.label=this.label&&this.label.map(t=>t.clone()),e.unified=this.unified&&this.unified.map(t=>t.clone()),e}}let Wt=class Ke{constructor(){this.geometryDPInfo=new te}clone(){const e=new Ke;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}};class xe{constructor(){this.zLevels=[]}clone(){const e=new xe;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}let Re=class{constructor(){this.vertexData=new Map,this.vertexCount=0,this.indexData=[]}clear(){this.vertexData.clear(),this.vertexCount=0,this.indexData=[]}update(e,t,s){for(const i in e)this.vertexData.set(i,e[i]);for(const i in this.vertexData)e[i]===null&&this.vertexData.delete(i);this.vertexCount=t,this.indexData=s}},fe=class pe{constructor(e,t,s,i=0,r=0){this.id=e,this.geometryType=t,this.materialKey=s,this.minZoom=i,this.maxZoom=r,this.meshData=null,this.symbolLevel=0,this.zOrder=0,this.vertexFrom=0,this.vertexCount=0,this.indexFrom=0,this.indexCount=0,this._sortKey=null}get sortKey(){return this._sortKey==null&&this._computeSortKey(),this._sortKey}clone(){return this.copy()}copy(){const e=new pe(this.id,this.geometryType,this.materialKey);return e.vertexFrom=this.vertexFrom,e.vertexCount=this.vertexCount,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e.zOrder=this.zOrder,e.symbolLevel=this.symbolLevel,e.meshData=this.meshData,e.minZoom=this.minZoom,e.maxZoom=this.maxZoom,e}setMeshDataFromBuffers(e,t,s){const i=new Re;for(const r in t){const o=t[r].stride,a=t[r].data;if(!a)continue;const d=[],l=Y(o);for(let h=0;h<o*e.vertexCount/l;++h)d[h]=a[h+o*e.vertexFrom/l];i.vertexData.set(r,d)}i.indexData.length=0;for(let r=0;r<e.indexCount;++r)i.indexData[r]=s[r+e.indexFrom]-e.vertexFrom;i.vertexCount=e.vertexCount,this.meshData=i}readMeshDataFromBuffers(e,t){this.meshData?this.meshData.clear():this.meshData=new Re;for(const s in e){const i=e[s].stride,r=e[s].data,o=[],a=Y(i);for(let d=0;d<i*this.vertexCount/a;++d)o[d]=r[d+i*this.vertexFrom/a];this.meshData.vertexData.set(s,o)}this.meshData.indexData.length=0;for(let s=0;s<this.indexCount;++s)this.meshData.indexData[s]=t[s+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(e,t,s,i){if(this.meshData){for(const r in t){const o=t[r].stride,a=this.meshData.vertexData.get(r),d=t[r].data,l=Y(o);for(let h=0;h<o*this.meshData.vertexCount/l;++h)d[h+o*e/l]=a[h]}for(let r=0;r<this.meshData.indexData.length;++r)i[r+s]=this.meshData.indexData[r]+e;this.vertexFrom=e,this.vertexCount=this.meshData.vertexCount,this.indexFrom=s,this.indexCount=this.meshData.indexData.length}}static writeAllMeshDataToBuffers(e,t,s){let i=0,r=0;for(const o of e)o.writeMeshDataToBuffers(i,t,r,s),i+=o.vertexCount,r+=o.indexCount}_computeSortKey(){this._sortKey=(31&this.symbolLevel)<<12|(127&this.zOrder)<<4|7&this.geometryType}serialize(e){return e.push(this.geometryType),e.push(this.materialKey),e.push(this.vertexFrom),e.push(this.vertexCount),e.push(this.indexFrom),e.push(this.indexCount),e.push(this.minZoom),e.push(this.maxZoom),e}static deserialize(e,t){const s=e.readInt32(),i=e.readInt32(),r=new pe(t.id,s,i);return r.vertexFrom=e.readInt32(),r.vertexCount=e.readInt32(),r.indexFrom=e.readInt32(),r.indexCount=e.readInt32(),r.minZoom=e.readInt32(),r.maxZoom=e.readInt32(),r}};function Ee(n,e){if(e!==null){n.push(e.length);for(const t of e)t.serialize(n);return n}n.push(0)}function Jt(n,e,t){const s=n.readInt32(),i=new Array(s);for(let r=0;r<i.length;r++)i[r]=e.deserialize(n,t);return i}let He=class Q{constructor(e){this.insertAfter=null,this.id=e,this.displayRecords=[]}copy(){const e=new Q(this.id);return e.set(this),e}clone(){const e=new Q(this.id);return e.displayRecords=this.displayRecords.map(t=>t.clone()),e.insertAfter=this.insertAfter,e}set(e){this.id=e.id,this.displayRecords=e.displayRecords,this.insertAfter=e.insertAfter}serialize(e){return e.push(this.id),Ee(e,this.displayRecords),e}static deserialize(e){const t=e.readInt32(),s=new Q(t),i={id:t};return s.displayRecords=Jt(e,fe,i)??[],s}};class j{constructor(){this.displayObjects=[],this._displayList=null}get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const e of this.displayObjects)this._displayObjectRegistry.set(e.id,e)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new Qt;for(const e of this.displayObjects)for(const t of e.displayRecords)this._displayList.addToList(t)}clone(){const e=new j;return this.displayObjects&&(e.displayObjects=this.displayObjects.map(t=>t.clone())),e}serialize(e){return Ee(e,this.displayObjects),e}_deserializeObjects(e){const t=e.readInt32(),s=new Array(t),i=new Map;for(let r=0;r<s.length;++r){const o=He.deserialize(e);s[r]=o,i.set(o.id,o)}this.displayObjects=s,this._displayList=null,this._displayObjectRegistry=i}static deserialize(e){const t=new j;return t._deserializeObjects(e),t}}let ae=class me{constructor(e,t){this.data=e,this.stride=t}static decode(e){const t=J(e.data,e.stride),s=e.stride;return new me(t,s)}static fromVertexVector(e){const t=J(e.data.buffer(),e.stride),s=e.stride;return new me(t,s)}};class ${constructor(e,t,s){this.geometryType=e,this.indexBuffer=new Uint32Array(t),this.namedBuffers=s}static decode(e){const t=e.geometryType,s=e.indexBuffer,i={};for(const r in e.namedBuffers)i[r]=ae.decode(e.namedBuffers[r]);return new $(t,s,i)}static fromVertexData(e,t){const s=e.indices,i=J(e.vertices,e.stride),r=e.stride,o={geometry:new ae(i,r)};return new $(t,s,o)}static fromVertexVectors(e){const t=e.geometryType,s=e.indexVector.buffer(),i={};for(const r in e.namedVectors)i[r]=ae.fromVertexVector(e.namedVectors[r]);return new $(t,s,i)}}class es{get vertexCount(){const e=this.stride/4,t=this.data.length/e;return t!==(0|t)&&console.debug("Corrupted stride"),t}constructor(e,t){this.data=e,this.stride=t}transfer(e,t){const s=this.data.buffer();e.vertexCount=this.vertexCount,e.data=s,e.stride=this.stride,t.push(s)}}let ts=class{constructor(e,t,s){this.geometryType=e,this.indexVector=new X(Uint32Array,6*t),this.namedVectors={};const i=_t(e,s);for(const r in i){const o=i[r];let a;switch(o%4){case 0:case 2:a=new X(Uint32Array,o*t);break;case 1:case 3:a=new X(Uint8Array,o*t)}this.namedVectors[r]=new es(a,o)}}get(e){return this.namedVectors[e].data}getVector(e){return this.namedVectors[e]}transfer(e,t){const s=this.indexVector.buffer(),i={};t.push(s);for(const r in this.namedVectors){const o=this.namedVectors[r];i[r]={},o.transfer(i[r],t)}e.geometryType=this.geometryType,e.indexBuffer=s,e.namedBuffers=i,this.destroy()}intoBuffers(){const e=$.fromVertexVectors(this);return this.destroy(),e}destroy(){this.indexVector=null,this.namedVectors=null}};const Z=new Ve,R=new Ve,Ie=1.5,ss=5;function is(n,e){const t={};for(const s in n){const i={data:ge(e,n[s]),stride:n[s]};t[s]=i}return t}function rs(n){return[n.fill||{},n.line||{},n.icon||{},n.text||{},n.label||{}]}function os(n){const e=[[],[],[],[],[]],t=n;for(const s of t)for(const i of s.displayRecords)e[i.geometryType].push(i);return e}let Me=class F{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){var o,a,d;if(Z.reset(),!this.tileDisplayData)return;const e=os(this.tileDisplayData.displayObjects);for(const l of e)for(const h of l)h&&Z.needMore(h.geometryType,h.meshData?h.meshData.vertexCount:h.vertexCount,h.meshData?h.meshData.indexData.length:h.indexCount);const t=e.length,s=new oe;for(let l=0;l<t;++l){s.geometries[l].indexBuffer=new Uint32Array(Math.round(Ie*Z.indicesFor(l)));const h=[],c=(o=this.tileBufferData)==null?void 0:o.geometries[l].vertexBuffer;if(!c)continue;for(const p in c)h.push(c[p].stride);const u=F._computeVertexAlignment(h),f=Math.round(Ie*Z.verticesFor(l)),m=F._align(f,u);for(const p in c){const g=c[p].stride;s.geometries[l].vertexBuffer[p]={stride:g,data:ge(m,g)}}}R.reset(),(a=this.tileDisplayData.displayList)==null||a.clear();for(let l=0;l<t;++l){const h=e[l];for(const c of h){if(c.meshData)c.writeMeshDataToBuffers(R.verticesFor(l),s.geometries[l].vertexBuffer,R.indicesFor(l),s.geometries[l].indexBuffer),c.meshData=null;else{const u=(d=this.tileBufferData)==null?void 0:d.geometries[l];if(u){const f=u.vertexBuffer,m=u.indexBuffer,p=s.geometries[l].vertexBuffer,g=s.geometries[l].indexBuffer,_=R.verticesFor(l),x=R.indicesFor(l);ce(_,x,p,g,c,f,m),c.vertexFrom=_,c.indexFrom=x}}R.needMore(l,c.vertexCount,c.indexCount)}}const{displayList:i,displayObjects:r}=this.tileDisplayData;if(i)for(const l of r)i.addToList(l.displayRecords);this.tileBufferData=s}getStrides(){var s;const e=[],t=(s=this.tileBufferData)==null?void 0:s.geometries;if(!t)return e;for(let i=0;i<t.length;++i){const r=t[i];e[i]={};for(const o in r.vertexBuffer)e[i][o]=r.vertexBuffer[o].stride}return e}clone(){var t,s;const e=new F;return e.tileBufferData=((t=this.tileBufferData)==null?void 0:t.clone())??null,e.tileDisplayData=((s=this.tileDisplayData)==null?void 0:s.clone())??null,e}_guessSize(){var o;const e=((o=this.tileDisplayData)==null?void 0:o.displayObjects)??[],t=Math.min(e.length,4),s=12,i=40;let r=0;for(let a=0;a<t;a++)r=Math.max(r,e[a].displayRecords.length);return 2*(e.length*s+e.length*r*i)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),s=this.tileDisplayData.serialize(new X(Int32Array,this._guessSize())).buffer();return t.push(s),{result:{displayData:s,bufferData:e},transferList:t}}static fromVertexData(e,t){const s={},i=new Map;for(const r of t)i.set(r.id,r);return vt(r=>{const o=e.data[r];if(T(o)){const a=wt.from(o.records).getCursor();for(;a.next();){const d=a.id,l=a.materialKey,h=a.indexFrom,c=a.indexCount,u=a.vertexFrom,f=a.vertexCount,m=i.get(d),p=new fe(d,r,l);p.indexFrom=h,p.indexCount=c,p.vertexFrom=u,p.vertexCount=f,m.displayRecords.push(p)}s[r]=$.fromVertexData(o,r)}else s[r]=new ts(r,0,Oe.DEFAULT).intoBuffers()}),F.fromMeshData({displayObjects:t,vertexBuffersMap:s})}static fromMeshData(e){const t=new F,s=new j,i=new oe;s.displayObjects=e.displayObjects;for(const r in e.vertexBuffersMap){const o=e.vertexBuffersMap[r];i.geometries[r].indexBuffer=o.indexBuffer,i.geometries[r].vertexBuffer=o.namedBuffers}return t.tileDisplayData=s,t.tileBufferData=i,t}static bind(e,t){const s=new F;return s.tileDisplayData=e,s.tileBufferData=t,s}static create(e,t){const s=new F;s.tileDisplayData=new j,s.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],r=[0,0,0,0,0],o=[[],[],[],[],[]];for(const l of e)for(const h of l.displayRecords)o[h.geometryType].push(h),i[h.geometryType]+=h.meshData.vertexCount,r[h.geometryType]+=h.meshData.indexData.length;const a=new oe,d=rs(t);for(let l=0;l<ss;l++){const h=new Uint32Array(r[l]),c=is(d[l],i[l]);fe.writeAllMeshDataToBuffers(o[l],c,h),a.geometries[l]={indexBuffer:h,vertexBuffer:c}}return s.tileBufferData=a,s}static _align(e,t){const s=e%t;return s===0?e:e+(t-s)}static _computeVertexAlignment(e){let t=!1,s=!1;for(const i of e)i%4==2?t=!0:i%4!=0&&(s=!0);return s?4:t?2:1}};const I=512,B=50;function ns(n,e){const t=V(e);if(!t)return null;const[s,i]=t.valid;return n[2]>i?[C([n[0],n[1],i,n[3]]),C([s,n[1],s+n[2]-i,n[3]])]:n[0]<s?[C([s,n[1],n[2],n[3]]),C([i-(s-n[0]),n[1],i,n[3]])]:null}function as(n){return n==="text"||n==="esriTS"}function ls(n){return n==="simple-marker"||n==="picture-marker"||n==="esriSMS"||n==="esriPMS"}function Le(n){switch(We(n.geometry).type){case"point":case"multipoint":return 0;case"polyline":return 1;case"polygon":case"extent":return 2}return 0}function hs(n){if(!n)return null;const{xmin:e,ymin:t,xmax:s,ymax:i,spatialReference:r}=n;return new nt({rings:[[[e,t],[e,i],[s,i],[s,t],[e,t]]],spatialReference:r})}class ee extends Lt{static from(e,t,s){const i=Vt.createInstance(),r=[],o=e.filter(a=>!!a.geometry);for(const a of o){const d=ye(a.geometry);At(r,[a],d,!1,!1,t)}return new ee(i,r,s)}constructor(e,t,s){super(e,t,null),this._transform=s}get geometryType(){const e=this._current;return e?e.geometryType:null}get insertAfter(){return this._current.insertAfter}readGraphic(){return this._current}getCursor(){return this.copy()}copy(){const e=new ee(this.instance,this._features,this._transform);return this.copyInto(e),e}}const G=new Ue,le=new Ue,ze="esriGeometryPolyline";function $e(n){n.coords.length=0,n.lengths.length=0}let P=class W{constructor(){this.bounds=C(),this.graphic=null}static acquire(e=null,t,s,i,r){let o;return W._pool.length===0?o=new W:(o=W._pool.pop(),this._set.delete(o)),o.acquire(e,t,s,i,r),o}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,t){if(de(e.geometry)){const s=e.symbol;if(z(s))return null;if((s==null?void 0:s.layers.length)>0&&s.layers.some(i=>i.type==="text"||i.type==="marker")){const i=at(e.geometry);return i!==null?Kt(t,{},{x:i[0],y:i[1]},!1,!1):null}}return null}acquire(e=null,t,s,i,r){e&&this.set(e,t,s,i,r)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,r){this.graphic=e,this.geometry=s,this.symbolResource=t,this.bounds=i,r&&(this.size=r)}getGeometryQuantized(e,t,s,i){const r=this.geometry,o=ye(r);if(z(o))return null;switch(o){case"esriGeometryPolygon":{const a=r,{rings:d}=a;if(!d||d.length===0)return null;let l;if(l=d.length===1&&d[0].length===2?A(e,{paths:[[d[0][0],d[0][1]]]}):A(e,this.geometry),!l){const h={x:d[0][0][0],y:d[0][0][1]};if(l=A(e,h),l){const{x:c,y:u}=l;return{rings:[[[c-1,u],[1,-1],[1,1],[-1,1],[-1,-1]]]}}}return l}case"esriGeometryPolyline":{const a=r;$e(G),$e(le);const d=a.hasZ??!1,l=a.hasM??!1;return Gt(G,a),Ot(le,G,d,l,ze,e.scale[0]),Ut(G,le,d,l,ze,e),Pt(G,a.hasZ??!1,a.hasM??!1)}case"esriGeometryMultipoint":{const a=r,d=.5*i*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),l=V(s);let h=a.points;if(l){const[c,u]=l.valid,f=u-c;h=h.filter(m=>{if(m[0]+d>u||m[0]-d<c){const p=[...m];return m[0]+d>u?p[0]-=f:p[0]+=f,se(t,m,d)||se(t,p,d)}return se(t,m,d)})}return h.length===0?{points:h}:A(e,{points:h})}}return A(e,this.geometry)}};P._pool=[],P._set=new Set;const O={minX:0,minY:0,maxX:0,maxY:0},M=C(),Ae=1e-5;function N(n,e,t,s,i){return O.minX=e,O.minY=t,O.maxX=s,O.maxY=i,n.search(O)}function ds(n){return{minX:n.bounds[0],minY:n.bounds[1],maxX:n.bounds[2],maxY:n.bounds[3]}}class cs{constructor(e,t,s,i,r,o,a){this._graphics=i,this._onAdd=r,this._onRemove=o,this._hashToCIM=a,this._index=jt(9,ds),this._itemByGraphic=new Map,this._inflatedSizeHelper=new _e,this._tileInfoView=e,this._uidFieldName=s;const d=e.getClosestInfoForScale(t);d&&(this._resolution=this._tileInfoView.getTileResolution(d.level))}setResourceManager(e){this._cimResourceManager=e,this._hittestDrawHelper=new Ze(e)}hitTest(e,t,s,i,r){var m;e=kt(e,this._tileInfoView.spatialReference);const o=.5*i*window.devicePixelRatio*s;M[0]=e-o,M[1]=t-o,M[2]=e+o,M[3]=t+o;const a=.5*i*(s+B),d=N(this._index,e-a,t-a,e+a,t+a);if(!d||d.length===0)return[];const l=[],h=C(),c=C();for(const p of d){const{geometry:g,symbolResource:_}=p;this._getSymbolBounds(h,_,g,c,r),c[3]=c[2]=c[1]=c[0]=0,st(h,M)&&((m=p.graphic)!=null&&m.visible)&&l.push(p)}if(l.length===0)return[];const u=this._hittestDrawHelper,f=[];for(const p of l){const{geometry:g,symbolResource:_}=p,{hash:x,textInfo:S}=_,k=this._hashToCIM.get(x);k&&u.hitTest(M,k.symbol,g,S,r,i)&&f.push(p)}return f.sort(us),f.map(p=>p.graphic)}getGraphicsData(e,t,s){const i=this._searchForItems(t);if(i.length===0||s.length===0)return[];i.sort((c,u)=>c.zorder-u.zorder),i[0].insertAfter=-1;for(let c=1;c<i.length;c++)i[c].insertAfter=i[c-1].graphic.uid;i.sort((c,u)=>c.graphic.uid-u.graphic.uid),s.sort((c,u)=>c.uid-u.uid);let r,o=0,a=0;const d=t.resolution,l=[],h={originPosition:"upperLeft",scale:[d,d],translate:[t.bounds[0],t.bounds[3]]};for(const c of s){for(a=-2;o<i.length;)if(r=i[o],o++,c.uid===r.graphic.uid){a=r.insertAfter;break}if(!(r!=null&&r.geometry)||a===-2)continue;const u=r.getGeometryQuantized(h,t.bounds,this._tileInfoView.spatialReference,d),f={...r.graphic.attributes};f[this._uidFieldName]=c.uid,r.groupId==null&&(r.groupId=e.createTemplateGroup(r.symbol,null)),l.push({centroid:P.getCentroidQuantized(r,h),geometry:u,attributes:f,symbol:r.symbol,groupId:r.groupId,insertAfter:a,zorder:r.zorder})}return l.sort((c,u)=>c.zorder-u.zorder),l}queryTileData(e,t){if(this._graphics.length===0)return[];const{bounds:s,resolution:i}=t,r=this._searchForItems(t),o=[];return r.length===0||this._createTileGraphics(o,e,r,{originPosition:"upperLeft",scale:[i,i],translate:[s[0],s[3]]},t),o}has(e){return this._itemByGraphic.has(e)}getBounds(e){const t=this._itemByGraphic.get(e);return t?t.bounds:null}getAllBounds(){return Array.from(this._itemByGraphic.values()).filter(e=>e.graphic.visible).map(e=>e.bounds)}addOrModify(e,t,s){if(!e||z(t))return;this.has(e)&&this.remove(e),this._onAdd(e);const i=[0,0,0,0],r=this._getSymbolBounds(null,t,s,i,0),o=P.acquire(e,t,s,T(r)?r:null,i);return this._itemByGraphic.set(e,o),s&&this._index.insert(o),o.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);t!=null&&t.bounds&&this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,s;for(let i=0;i<e.length;i++)s=e[i],t=this._itemByGraphic.get(s),t&&(t.zorder=i)}update(e,t,s){const i=this._itemByGraphic.get(e);i.groupId=null;const r=it(i.bounds);this._index.remove(i);const o=this._getSymbolBounds(i.bounds,t,s,i.size,0);return T(o)&&i.set(e,t,s,o,i.size),s&&this._index.insert(i),{oldBounds:r,newBounds:i.bounds}}updateLevel(e){if(this._resolution===e)return;this._resolution=e,this._index.clear();const t=this._itemByGraphic,s=[];for(const[i,r]of t){const o=this._getSymbolBounds(r.bounds,r.symbolResource,r.geometry,r.size,0);r.geometry&&T(o)&&(r.bounds=o,s.push(r))}this._index.load(s)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,s,i,r){const o=this._uidFieldName,a=this._tileInfoView.spatialReference,{bounds:d,resolution:l}=r;let h,c,u,f;s.sort((m,p)=>m.zorder-p.zorder);for(let m=0;m<s.length;m++){u=s[m],h=u.graphic,c=u.getGeometryQuantized(i,d,a,l),f=m===0?-1:s[m-1].graphic.uid;const p={...u.graphic.attributes};p[o]=h.uid,u.groupId==null&&(u.groupId=t.createTemplateGroup(u.symbol,null)),e.push({centroid:P.getCentroidQuantized(u,i),geometry:c,attributes:p,symbol:u.symbol,groupId:u.groupId,insertAfter:f,zorder:u.zorder})}}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds,i=V(t);if(i&&t.isWrappable){const[r,o]=i.valid,a=Math.abs(s[2]-o)<Ae,d=Math.abs(s[0]-r)<Ae;if((!a||!d)&&(a||d)){const l=e.resolution;let h;h=C(a?[r,s[1],r+l*B,s[3]]:[o-l*B,s[1],o,s[3]]);const c=N(this._index,s[0],s[1],s[2],s[3]),u=N(this._index,h[0],h[1],h[2],h[3]);return[...new Set([...c,...u])]}}return N(this._index,s[0],s[1],s[2],s[3])}_getSymbolBounds(e,t,s,i,r){if(!t||!t.symbol||!s)return null;if(e||(e=C()),lt(e,s),!i||i[0]===0&&i[1]===0&&i[2]===0&&i[3]===0){const{hash:d,textInfo:l}=t,h=this._hashToCIM.get(d);if(!h)return null;i||(i=[0,0,0,0]);const c=this._inflatedSizeHelper.getSymbolInflateSize(i,h.symbol,this._cimResourceManager,r,l);i[0]=E(c[0]),i[1]=E(c[1]),i[2]=E(c[2]),i[3]=E(c[3])}const o=this._resolution,a=_e.safeSize(i);return e[0]-=a*o,e[1]-=a*o,e[2]+=a*o,e[3]+=a*o,e}}const us=(n,e)=>{const t=Le(n.graphic),s=Le(e.graphic);return t===s?e.zorder-n.zorder:t-s},fs=n=>{let e=class extends Et(n){constructor(){super(...arguments),this.graphics=null,this.renderer=null}};return b([D()],e.prototype,"graphics",void 0),b([D()],e.prototype,"renderer",void 0),b([D()],e.prototype,"updating",void 0),b([D()],e.prototype,"view",void 0),e=b([Ge("esri.views.layers.GraphicsView")],e),e},ps=Qe("esri-2d-graphic-debug");function he(n,e,t){let s=t.get(n);return s||(s={tile:e,addedOrModified:[],removed:[]},t.set(n,s)),s}let w=class extends fs(Xe(qe)){constructor(n){super(n),this._storage=new zt,this._displayIds=new Map,this._controller=new AbortController,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashToExpandedSymbolPromise=new Map,this._hashToCIMSymbolPromise=new Map,this._hashToCIM=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.defaultPointSymbolEnabled=!0,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this._controller.abort(),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null,this._hashToCIM.clear(),this._hashToCIMSymbolPromise.clear(),this._hashToExpandedSymbolPromise.clear()}_createMatcher(n,e,t){if(n){const s=Te(n),i=Mt({indexCount:0,fields:{}},"feature",n,s);this._matcher=Bt(i,e,null,t)}}_createDisplayId(n){let e=this._displayIds.get(n);return e||(e=this._storage.createDisplayId(),this._displayIds.set(n,e)),e}initialize(){this._attributeStore=new $t({type:"local",initialize:i=>Promise.resolve(this.container.attributeView.initialize(i)),update:i=>this.container.attributeView.requestUpdate(i),render:()=>this.container.requestRender()},Ht("2d"),()=>this.notifyChange("updating")),this.container.hasHighlight=()=>this._attributeStore.hasHighlight;const n=i=>{this._createDisplayId(i.uid),this._setFilterState(i.uid,i.visible)},e=i=>{const r=this._displayIds.get(i.uid);this._displayIds.delete(i.uid),this._storage.releaseDisplayId(r)},t=new Ft(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._graphicStore=new cs(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,n,e,this._hashToCIM),this._meshFactory=new St(null,this.uid,t),this._templateStore=t,this.handles.add([et(()=>this.renderer,i=>{this._createMatcher(i,t,this.container.stage.resourceManager);for(const r of this.graphics)this._pendingUpdate.updated.add(r);this.requestUpdate()}),this.view.graphicsTileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",()=>{ps&&this.container.enableRenderingBounds(()=>this._graphicStore.getAllBounds()),this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",r=>this._graphicsChangeHandler(r)),"graphics");const i=this.container.stage.resourceManager;this._createMatcher(this.renderer,t,i),this._graphicStore.setResourceManager(i),this._attached=!0,this.notifyChange("updating")})]);const s=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:s,removed:[]})}get updating(){return!this._attached||this._updatingGraphicsTimer!==null||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0||this._attributeStore.isUpdating()}hitTest(n){if(!this.view||!this.view.position)return[];const{resolution:e,rotation:t}=this.view.state;return this._graphicStore.hitTest(n.x,n.y,2,e,t)}update(n){v(this._controller.signal);const e=n.state,{resolution:t}=e;if(this._graphicStore.updateLevel(t),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(n){this.updateRequested&&(this.updateRequested=!1,this.update(n))}graphicUpdateHandler(n){const{graphic:e,property:t}=n;switch(t){case"attributes":case"geometry":case"symbol":this._pendingUpdate.updated.add(e),this.requestUpdate();break;case"visible":this._setFilterState(e.uid,e.visible),this._attributeStore.sendUpdates()}}setHighlight(n){const e=n.map(t=>this._displayIds.get(t)).filter(T);this._attributeStore.setHighlight(n,e)}_getIntersectingTiles(n){const e=this._graphicStore.getBounds(n);if(!e||rt(e)===0||ot(e)===0)return[];const t=ns(e,this.view.spatialReference);return T(t)?[...new Set([...this.view.graphicsTileStore.boundsIntersections(t[0]),...this.view.graphicsTileStore.boundsIntersections(t[1])])]:this.view.graphicsTileStore.boundsIntersections(e)}async _updateTile(n){v(this._controller.signal);const e=n.tile,t=this._getGraphicsData(this._templateStore,e,n.addedOrModified),s=await this._processGraphics(e,t);return v(this._controller.signal),this._patchTile(e.key,{type:"update",addOrUpdate:s,remove:n.removed,end:!0,clear:!1,sort:!1}),s}_patchTile(n,e){const t=this._tiles.get(n);t&&(this.container.onTileData(t,e),this.container.requestRender())}_graphicsChangeHandler(n){const e=this._pendingUpdate;for(const t of n.added)e.added.add(t);for(const t of n.moved)e.updated.add(t);for(const t of n.removed)this._pendingUpdate.added.has(t)?e.added.delete(t):e.removed.add(t);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const n={added:[],removed:[],updated:[]};if(!this.graphics)return n;const e=this._pendingUpdate;for(const t of this.graphics.items)e.added.has(t)?n.added.push(t):e.updated.has(t)&&n.updated.push(t);for(const t of e.removed)this._graphicStore.has(t)&&n.removed.push(t);return e.added.clear(),e.removed.clear(),e.updated.clear(),n}async _updateGraphics(){this._processing=!0;const{added:n,removed:e,updated:t}=this._getGraphicsToUpdate(),s=this._tilesToUpdate;let i;try{if(!this._graphicStoreUpdate){const h=this.view.state,{resolution:c}=h;this._graphicStore.updateLevel(c)}const r=[],o=new Array(n.length+e.length);for(let h=0;h<t.length;h++){const c=t[h],u=this._getIntersectingTiles(c);for(const f of u)i=f.id,he(i,f,s).removed.push(this._displayIds.get(c.uid));r.push(this._updateGraphic(c,null)),o[h]=c}const a=t.length;for(let h=0;h<n.length;h++){const c=n[h];o[a+h]=c,this._graphicsSet.add(c),r.push(this._addGraphic(c))}for(const h of e){this._abortProcessingGraphic(h.uid);const c=this._getIntersectingTiles(h);for(const u of c)i=u.id,he(i,u,s).removed.push(this._displayIds.get(h.uid));this._graphicsSet.delete(h),this._graphicStore.remove(h)}let d;this._flipUpdatingGraphics(),await Promise.all(r);for(let h=0;h<o.length;h++){d=o[h];const c=this._getIntersectingTiles(d);for(const u of c)i=u.id,he(i,u,s).addedOrModified.push(d)}this._graphicStore.updateZ();const l=[];for(const[h,c]of s)l.push(this._updateTile(c));await Promise.all(l)}catch(r){K(r)}for(const r of e)try{const o=await this._getSymbolForGraphic(r,null);if(o){const a=o.hash();this._hashToExpandedSymbol.delete(a)}}catch(o){K(o)}s.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(n){const e=(n.attributes?Object.keys(n.attributes):[]).map(t=>({name:t,alias:t,type:typeof n.attributes[t]=="string"?"esriFieldTypeString":"esriFieldTypeDouble"}));return z(n.geometry)?null:{geometryType:ye(n.geometry),spatialReference:tt.fromJSON(n.geometry.spatialReference),fields:e}}_getSymbolForGraphic(n,e){return v(this._controller.signal),T(n.symbol)?Promise.resolve(n.symbol):T(this.renderer)?this.renderer.getSymbolAsync(n,{scale:this.view.scale,signal:T(e)?e.signal:null}):Promise.resolve(this._getNullSymbol(n))}_getCIMSymbol(n,e,t){let s=this._hashToCIM.get(e);if(s)return Promise.resolve(s);const i=Ne(n);if(T(i)){if(i.type==="CIMSymbolReference")return s=i,this._hashToCIM.set(e,s),Promise.resolve(s);let r=this._hashToCIMSymbolPromise.get(e);return r||(r=i.fetchCIMSymbol(t).then(o=>(this._hashToCIM.set(e,o.data),this._hashToCIMSymbolPromise.delete(e),o)).catch(o=>(this._hashToCIMSymbolPromise.delete(e),ve(o),null)),this._hashToCIMSymbolPromise.set(e,r),r)}return Promise.resolve(null)}_expandCIMSymbol(n,e,t,s){const i=this._hashToExpandedSymbol.get(t);if(i)return Promise.resolve(i);let r=this._hashToExpandedSymbolPromise.get(t);if(r)return r;const o=this.container.stage,a=this._getArcadeInfo(e),d=Te(null),l=qt(n,d);return r=Rt(l,a,o.resourceManager,s),this._hashToExpandedSymbolPromise.set(t,r),r.then(h=>(this._hashToExpandedSymbol.set(t,h),this._hashToExpandedSymbolPromise.delete(t),h)),r}async _getSymbolResources(n,e){return v(this._controller.signal),this.container.stage?this._getSymbolForGraphic(n,e).then(t=>{if(!t)return null;const s=t.hash();return this._getCIMSymbol(t,s,e).then(i=>z(i)?null:this._expandCIMSymbol(i,n,s,e).then(r=>{const o=r.layers.filter(a=>a.type==="text"&&typeof a.text=="string");if(o&&o.length>0){const a=new Array(o.length);for(let l=0;l<o.length;l++){const h=o[l],c=[],[u]=Ye(h.text);h.text=u;for(let f=0;f<u.length;f++)c.push(u.charCodeAt(f));a[l]={symbol:h,id:l,glyphIds:c}}const d=new Map;return this.container.getMaterialItems(a).then(l=>{Je(l);for(let h=0;h<o.length;h++){const c=o[h];d.set(c.cim,{text:c.text,mosaicItem:l[h].mosaicItem})}return{symbol:r,textInfo:d,hash:s}})}return{symbol:r,hash:s}}))}).catch(t=>(ve(t),null)):null}async _projectAndNormalizeGeometry(n,e){if(v(this._controller.signal),z(n.geometry)||n.geometry.type==="mesh")return null;let t=n.geometry;if(de(t)){const r=t.rings;t.rings=r}else if(be(t)){const r=t.paths;t.paths=r}else if(De(t)){const r=await this._getSymbolForGraphic(n,e);v(this._controller.signal),r&&(ls(r.type)||as(r.type))?t=t.center:t=hs(t)}await ct(t.spatialReference,this.view.spatialReference);const s=dt(t),i=ut(s,t.spatialReference,this.view.spatialReference);return i&&ht(i),i}_onTileUpdate(n){const e=V(this.view.spatialReference);if(n.added&&n.added.length>0)for(const t of n.added)this._addNewTile(t,e);if(n.removed&&n.removed.length>0)for(const t of n.removed)this._removeTile(t.key)}async _addGraphic(n){this._abortProcessingGraphic(n.uid),v(this._controller.signal);const e=new AbortController;this._graphicIdToAbortController.set(n.uid,e);const t={signal:e.signal};try{await this._addOrUpdateGraphic(n,t),v(this._controller.signal),this._graphicIdToAbortController.delete(n.uid)}catch(s){if(this._graphicIdToAbortController.delete(n.uid),!K(s))throw s}}_updateGraphic(n,e){v(this._controller.signal);const t=this._projectAndNormalizeGeometry(n,e),s=this._getSymbolResources(n,e);return Promise.all([t,s]).then(([i,r])=>{v(this._controller.signal),this._graphicStore.addOrModify(n,r,i)})}_addOrUpdateGraphic(n,e){v(this._controller.signal);const t=this._projectAndNormalizeGeometry(n,e),s=this._getSymbolResources(n,e);return Promise.all([t,s]).then(([i,r])=>{v(this._controller.signal),this._graphicsSet.has(n)&&this._graphicStore.addOrModify(n,r,i)})}_addTile(n){const e=this.view.featuresTilingScheme.getTileBounds(C(),n),t=this.view.featuresTilingScheme.getTileResolution(n.level),s=new Xt(n,t,e[0],e[3]);return this._tiles.set(n,s),this.container.addChild(s),s}async _addNewTile(n,e){const t=this._addTile(n.key),s=this._graphicStore.queryTileData(this._templateStore,n);if(s.length===0)return;if(e){const r=Math.round((e.valid[1]-e.valid[0])/n.resolution);for(const o of s)o.geometry&&(Ce(o.geometry)||ie(o.geometry))&&this._wrapPoints(o,r)}const i=n.key;this._tileUpdateSet.add(n.key),this.notifyChange("updating");try{const r={type:"update",clear:!1,addOrUpdate:await this._processGraphics(n,s),remove:[],end:!0,sort:!1};t.patch(r),this._tileUpdateSet.delete(i),this.notifyChange("updating")}catch(r){if(this._tileUpdateSet.delete(i),this.notifyChange("updating"),!K(r))throw r}}_removeTile(n){if(!this._tiles.has(n))return;const e=this._tiles.get(n);this.container.removeChild(e),e.destroy(),this._tiles.delete(n)}_setFilterState(n,e){const t=this._displayIds.get(n),s=this._attributeStore.getHighlightFlag(n);this._attributeStore.setData(t,0,0,s|(e?yt:0))}_getGraphicsData(n,e,t){const s=this.view,i=V(s.spatialReference),r=this._graphicStore.getGraphicsData(n,e,t);if(i){const o=Math.round((i.valid[1]-i.valid[0])/e.resolution);for(const a of r)a.geometry&&(Ce(a.geometry)||ie(a.geometry))&&this._wrapPoints(a,o)}return r}_wrapPoints(n,e){const t=n.geometry;ie(t)?this._wrapMultipoint(t,e):this._wrapPoint(n,e)}_wrapMultipoint(n,e){const t=n.points,s=[];let i=0,r=0;for(const[o,a]of t){if(s.push([o+i,a]),i=0,e===I){const d=5*B;o+r<d?(s.push([e,0]),i=-e):o+r>I-d&&(s.push([-e,0]),i=e)}else o+r<-B?(s.push([e,0]),i=-e):o+r>I+B&&(s.push([-e,0]),i=e);r+=o}n.points=s}_wrapPoint(n,e){const t=n.geometry;if(e===I){const s=5*B;t.x<s?n.geometry={points:[[t.x,t.y],[e,0]]}:t.x>I-s&&(n.geometry={points:[[t.x,t.y],[-e,0]]})}else t.x<-B?n.geometry={points:[[t.x,t.y],[e,0]]}:t.x>I+B&&(n.geometry={points:[[t.x,t.y],[-e,0]]})}_processGraphics(n,e,t){if(!(e&&e.length)||!this._meshFactory)return Promise.resolve(null);const s=ee.from(e,this.uid,n.transform),i=this._meshFactory;return this._matcher.then(r=>i.analyzeGraphics(s,this.container.stage.resourceManager,r,null,null,t).then(()=>(this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(n,s))))}_processAnalyzedGraphics(n,e){const t=this._meshFactory,s=e.getSize(),i=e.getCursor(),r={features:s,records:s,metrics:0},o=new It(n.key.id,r,Oe.DEFAULT,!1,!1),a=[];for(;i.next();){const c=i.readGraphic();c.insertAfter=c.insertAfter===-1?-1:this._displayIds.get(c.insertAfter),c.displayId=this._displayIds.get(c.attributes[this.uid]);const u=new He(c.displayId);u.insertAfter=c.insertAfter,a.push(u),t.writeGraphic(o,i,n.level,this.container.stage.resourceManager)}const d=n.tileInfoView.tileInfo.isWrappable,l=o.serialize(d);if(l.length!==1)return new Me;const h=l[0].message;return Me.fromVertexData(h,a)}_abortProcessingGraphic(n){var e;(e=this._graphicIdToAbortController.get(n))==null||e.abort()}_getNullSymbol(n){const e=n.geometry;return be(e)?ft:de(e)||De(e)?pt:this.defaultPointSymbolEnabled?mt:null}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout(()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")},160),this.notifyChange("updating")}};b([D({constructOnly:!0})],w.prototype,"requestUpdateCallback",void 0),b([D()],w.prototype,"container",void 0),b([D({constructOnly:!0})],w.prototype,"graphics",void 0),b([D()],w.prototype,"updating",null),b([D()],w.prototype,"view",void 0),b([D()],w.prototype,"updateRequested",void 0),b([D()],w.prototype,"defaultPointSymbolEnabled",void 0),w=b([Ge("esri.views.2d.layers.support.GraphicsView2D")],w);const oi=w;export{oi as a};
