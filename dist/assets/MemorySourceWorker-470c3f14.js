import{a as I}from"./Error-9392329b.js";import{t as v,r as _}from"./typedArrayUtil-c81d173a.js";import{c as b,s as D}from"./jsonUtils-e2434b33.js";import{J as O}from"./Extent-52b65909.js";import{n as q,s as M,o as Q}from"./featureConversionUtils-93a98860.js";import{t as Z,n as $}from"./objectIdUtils-789e911a.js";import{g as A}from"./FeatureStore-07a377c0.js";import{f as E,g as x}from"./projectionSupport-6e748f70.js";import{e as k}from"./QueryEngine-c9c8601a.js";import{i as C,o as P,a as G}from"./clientSideDefaults-62cfdc11.js";import{w as z,a as g,m as j,f as T,g as w}from"./sourceUtils-cb7c62ca.js";import{r as L}from"./FieldsIndex-b8dc9788.js";import{i as W}from"./fieldType-68c65bf7.js";import{M as B}from"./fieldUtils-c41301b0.js";import"./string-bf9c68ed.js";import"./Polyline-7f90e3cc.js";import"./cast-4d1aa82d.js";import"./ensureType-8c80e8c7.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-3ce2a460.js";import"./aaBoundingBox-55a55434.js";import"./mathUtils-505ef34b.js";import"./aaBoundingRect-062d7c89.js";import"./OptimizedFeature-6361f5d1.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./Evented-d69b5d66.js";import"./BoundsStore-a184d1ac.js";import"./PooledRBush-f7459720.js";import"./quickselect-56c5966e.js";import"./centroid-85944438.js";import"./utils-150f963d.js";import"./preload-helper-41c905a7.js";import"./projection-03688518.js";import"./SimpleObservable-7e8b69a3.js";import"./mat4-63147b80.js";import"./assets-86d142ff.js";import"./request-16c6134d.js";import"./zscale-92e5f59b.js";import"./normalizeUtils-08ce1e14.js";import"./normalizeUtilsCommon-42c6cdb7.js";import"./geometry-8c15a791.js";import"./typeUtils-f38bdb16.js";import"./json-48e3ea08.js";import"./MemCache-c220a92a.js";import"./QueryEngineResult-9a044f5d.js";import"./quantizationUtils-54fe414b.js";import"./ItemCache-28393d1d.js";import"./WhereClause-daac4082.js";import"./executionError-fb3f283a.js";import"./datetime-b6333958.js";import"./utils-717e8c9c.js";import"./generateRendererUtils-f872a1df.js";import"./enumeration-de0a766e.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-23a1f534.js";import"./Scheduler-05bc8017.js";import"./reactiveUtils-989a8d7f.js";import"./defaultsJSON-b087dd4d.js";const U=O,H={xmin:-180,ymin:-90,xmax:180,ymax:90,spatialReference:O},J={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};function V(y){return D(y)?y.z!=null:!!y.hasZ}function K(y){return D(y)?y.m!=null:!!y.hasM}class tt{constructor(){this._queryEngine=null,this._nextObjectId=null}destroy(){this._queryEngine&&this._queryEngine&&this._queryEngine.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e){const t=[],{features:a}=e,i=this._inferLayerProperties(a,e.fields),d=e.fields||[],p=e.hasM!=null?e.hasM:!!i.hasM,f=e.hasZ!=null?e.hasZ:!!i.hasZ,m=!e.spatialReference&&!i.spatialReference,u=m?U:e.spatialReference||i.spatialReference,c=m?H:null,n=e.geometryType||i.geometryType,o=!n;let l=e.objectIdField||i.objectIdField,r=e.timeInfo;if(!o&&(m&&t.push({name:"feature-layer:spatial-reference-not-found",message:"Spatial reference not provided or found in features. Defaults to WGS84"}),!n))throw new I("feature-layer:missing-property","geometryType not set and couldn't be inferred from the provided features");if(!l)throw new I("feature-layer:missing-property","objectIdField not set and couldn't be found in the provided fields");if(i.objectIdField&&l!==i.objectIdField&&(t.push({name:"feature-layer:duplicated-oid-field",message:`Provided objectIdField "${l}" doesn't match the field name "${i.objectIdField}", found in the provided fields`}),l=i.objectIdField),l&&!i.objectIdField){let s=null;d.some(h=>h.name===l&&(s=h,!0))?(s.type="esriFieldTypeOID",s.editable=!1,s.nullable=!1):d.unshift({alias:l,name:l,type:"esriFieldTypeOID",editable:!1,nullable:!1})}for(const s of d){if(s.name==null&&(s.name=s.alias),s.alias==null&&(s.alias=s.name),!s.name)throw new I("feature-layer:invalid-field-name","field name is missing",{field:s});if(s.name===l&&(s.type="esriFieldTypeOID"),!W.jsonValues.includes(s.type))throw new I("feature-layer:invalid-field-type",`invalid type for field "${s.name}"`,{field:s})}const F={};for(const s of d)if(s.type!=="esriFieldTypeOID"&&s.type!=="esriFieldTypeGlobalID"){const h=B(s);h!==void 0&&(F[s.name]=h)}if(this._fieldsIndex=new L(d),this._createDefaultAttributes=C(F,l),r){if(r.startTimeField){const s=this._fieldsIndex.get(r.startTimeField);s?(r.startTimeField=s.name,s.type="esriFieldTypeDate"):r.startTimeField=null}if(r.endTimeField){const s=this._fieldsIndex.get(r.endTimeField);s?(r.endTimeField=s.name,s.type="esriFieldTypeDate"):r.endTimeField=null}if(r.trackIdField){const s=this._fieldsIndex.get(r.trackIdField);s?r.trackIdField=s.name:(r.trackIdField=null,t.push({name:"feature-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:r}}))}r.startTimeField||r.endTimeField||(t.push({name:"feature-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing or invalid",details:{timeInfo:r}}),r=null)}const R={warnings:t,featureErrors:[],layerDefinition:{...J,drawingInfo:P(n),templates:G(F),extent:c,geometryType:n,objectIdField:l,fields:d,hasZ:f,hasM:p,timeInfo:r},assignedObjectIds:{}};if(this._queryEngine=new k({fields:d,geometryType:n,hasM:p,hasZ:f,objectIdField:l,spatialReference:u,featureStore:new A({geometryType:n,hasM:p,hasZ:f}),timeInfo:r,cacheSpatialQueries:!0}),!a||!a.length)return this._nextObjectId=Z,R;const S=$(l,a);return this._nextObjectId=S+1,await E(a,u),this._loadInitialFeatures(R,a)}async applyEdits(e){const{spatialReference:t,geometryType:a}=this._queryEngine;return await Promise.all([z(t,a),E(e.adds,t),E(e.updates,t)]),this._applyEdits(e)}queryFeatures(e,t={}){return this._queryEngine.executeQuery(e,t.signal)}queryFeatureCount(e,t={}){return this._queryEngine.executeQueryForCount(e,t.signal)}queryObjectIds(e,t={}){return this._queryEngine.executeQueryForIds(e,t.signal)}queryExtent(e,t={}){return this._queryEngine.executeQueryForExtent(e,t.signal)}querySnapping(e,t={}){return this._queryEngine.executeQueryForSnapping(e,t.signal)}_inferLayerProperties(e,t){let a,i,d=null,p=null,f=null;for(const m of e){const u=m.geometry;if(!v(u)&&(d||(d=b(u)),p||(p=u.spatialReference),a==null&&(a=V(u)),i==null&&(i=K(u)),d&&p&&a!=null&&i!=null))break}if(t&&t.length){let m=null;t.some(u=>{const c=u.type==="esriFieldTypeOID",n=!u.type&&u.name&&u.name.toLowerCase()==="objectid";return m=u,c||n})&&(f=m.name)}return{geometryType:d,spatialReference:p,objectIdField:f,hasM:i,hasZ:a}}async _loadInitialFeatures(e,t){const{geometryType:a,hasM:i,hasZ:d,objectIdField:p,spatialReference:f,featureStore:m}=this._queryEngine,u=[];for(const o of t){if(o.uid!=null&&(e.assignedObjectIds[o.uid]=-1),o.geometry&&a!==b(o.geometry)){e.featureErrors.push(g("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),r=j(this._fieldsIndex,l,o.attributes,!0,e.warnings);r?e.featureErrors.push(r):(this._assignObjectId(l,o.attributes,!0),o.attributes=l,o.uid!=null&&(e.assignedObjectIds[o.uid]=o.attributes[p]),_(o.geometry)&&(o.geometry=x(o.geometry,o.geometry.spatialReference,f)),u.push(o))}m.addMany(q([],u,a,d,i,p));const{fullExtent:c,timeExtent:n}=await this._queryEngine.fetchRecomputedExtents();if(e.layerDefinition.extent=c,n){const{start:o,end:l}=n;e.layerDefinition.timeInfo.timeExtent=[o,l]}return e}async _applyEdits(e){const{adds:t,updates:a,deletes:i}=e,d={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(d,t),a&&a.length&&this._applyUpdateEdits(d,a),i&&i.length){for(const m of i)d.deleteResults.push(T(m));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:p,timeExtent:f}=await this._queryEngine.fetchRecomputedExtents();return{extent:p,timeExtent:f,featureEditResults:d}}_applyAddEdits(e,t){const{addResults:a}=e,{geometryType:i,hasM:d,hasZ:p,objectIdField:f,spatialReference:m,featureStore:u}=this._queryEngine,c=[];for(const n of t){if(n.geometry&&i!==b(n.geometry)){a.push(g("Incorrect geometry type."));continue}const o=this._createDefaultAttributes(),l=j(this._fieldsIndex,o,n.attributes);if(l)a.push(l);else{if(this._assignObjectId(o,n.attributes),n.attributes=o,n.uid!=null){const r=n.attributes[f];e.uidToObjectId[n.uid]=r}if(_(n.geometry)){const r=n.geometry.spatialReference??m;n.geometry=x(w(n.geometry,r),r,m)}c.push(n),a.push(T(n.attributes[f]))}}u.addMany(q([],c,i,p,d,f))}_applyUpdateEdits({updateResults:e},t){const{geometryType:a,hasM:i,hasZ:d,objectIdField:p,spatialReference:f,featureStore:m}=this._queryEngine;for(const u of t){const{attributes:c,geometry:n}=u,o=c&&c[p];if(o==null){e.push(g(`Identifier field ${p} missing`));continue}if(!m.has(o)){e.push(g(`Feature with object id ${o} missing`));continue}const l=M(m.getFeature(o),a,d,i);if(_(n)){if(a!==b(n)){e.push(g("Incorrect geometry type."));continue}const r=n.spatialReference??f;l.geometry=x(w(n,r),r,f)}if(c){const r=j(this._fieldsIndex,l.attributes,c);if(r){e.push(r);continue}}m.add(Q(l,a,d,i,p)),e.push(T(o))}}_assignObjectId(e,t,a=!1){const i=this._queryEngine.objectIdField;a&&t&&isFinite(t[i])?e[i]=t[i]:e[i]=this._nextObjectId++}}export{tt as default};
